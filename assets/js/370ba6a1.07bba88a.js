"use strict";(self.webpackChunkdoc_site_00=self.webpackChunkdoc_site_00||[]).push([[3268],{437:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"Robotics/robots_gh/robots_egl_commands","title":"KRL Commands: Schunk EGL 90-PN","description":"Three C# script components are available here, which can be used to generate KRL commands for the electrical gripper. Detailed documentation on how the gripper is configured on the KUKA controller can also be found here.","source":"@site/docs/Robotics/robots_gh/02_robots_egl_commands.md","sourceDirName":"Robotics/robots_gh","slug":"/Robotics/robots_gh/robots_egl_commands","permalink":"/docs/Robotics/robots_gh/robots_egl_commands","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Robots Tools and Robot","permalink":"/docs/Robotics/robots_gh/robots_robot"},"next":{"title":"KRL Code Snippets","permalink":"/docs/category/krl-code-snippets"}}');var r=o(4848),s=o(8453);const i={sidebar_position:2},a="KRL Commands: Schunk EGL 90-PN",c={},d=[{value:"Grasshopper C# Scripts",id:"grasshopper-c-scripts",level:2},{value:"EGL Init:",id:"egl-init",level:3},{value:"EGL Set:",id:"egl-set",level:3},{value:"EGL MoveTo:",id:"egl-moveto",level:3},{value:"Result:",id:"result",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",mdxAdmonitionTitle:"mdxAdmonitionTitle",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"krl-commands-schunk-egl-90-pn",children:"KRL Commands: Schunk EGL 90-PN"})}),"\n",(0,r.jsxs)(n.p,{children:["Three C# script components are available ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"https://github.com/georglobe/Robot.Data/tree/main/Grasshopper/UserObjects",children:"here"})}),", which can be used to generate KRL commands for the electrical gripper. Detailed documentation on how the gripper is configured on the KUKA controller can also be found ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.a,{href:"/docs/Robotics/KUKA_KR10/IOs/ios_egl",children:"here"})}),"."]}),"\n",(0,r.jsxs)(n.admonition,{type:"warning",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsxs)(n.p,{children:["During program execution, the gripper movement cannot be interrupted once the ",(0,r.jsx)(n.code,{children:"MoveTo"})," command has been issued."]})]}),"\n",(0,r.jsx)(n.h2,{id:"grasshopper-c-scripts",children:"Grasshopper C# Scripts"}),"\n",(0,r.jsxs)(n.p,{children:["For compatibility purposes, legacy RH7 script components are also available. As of 14 January 2025, we recommend using the ",(0,r.jsx)(n.code,{children:"Robots Version 1.6.5"})," plugin, which can be installed via Rhino's Package Manager."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:"using Robots;\nusing Robots.Commands;\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"egl-init",children:"EGL Init:"}),"\n",(0,r.jsxs)(n.p,{children:["Initializes the gripper for use in the next program. This process resets all parameters for the gripper to ",(0,r.jsx)(n.strong,{children:"0"}),", clears all errors, and attempts to execute its ",(0,r.jsx)(n.strong,{children:"referencing routine"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["This command should be connected to the ",(0,r.jsx)(n.code,{children:"Init Commands"}),' input of the Robots "Create Program" component.']}),"\n",(0,r.jsxs)(n.admonition,{type:"danger",children:[(0,r.jsx)(n.mdxAdmonitionTitle,{}),(0,r.jsx)(n.p,{children:"During the referencing routine, the gripper will fully close. This may cause damage to any mounted tools. Proceed with care."})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"egl_init",src:o(3437).A+"",width:"1243",height:"398"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:'// Initialize Gripper\nprivate void RunScript(ref object Command_)\n{\n    var manufacturer = Manufacturers.KUKA;\n\n    var commands = new List<Command>()\n    {\n        new Robots.Commands.Custom(\n            "EGL_Init",\n            manufacturer,\n            "EGL_Init()", // KRL command\n            null),\n    };\n\n    var cmdGroup = new Group(commands);\n    Command_ = cmdGroup;\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"egl-set",children:"EGL Set:"}),"\n",(0,r.jsx)(n.p,{children:"Provides functions to configure various parameters of the gripper. If no input is provided or the input value is set to 0, no command for that parameter will be generated."}),"\n",(0,r.jsxs)(n.p,{children:["This command should be connected to the ",(0,r.jsx)(n.code,{children:"Init Commands"}),' input of the Robots "Create Program" component. Additionally, you can modify any of the gripper\'s settings during a program run to adjust its behavior. To achieve this, supply the updated commands at the desired ',(0,r.jsx)(n.code,{children:"Robots.Target"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"egl_settings",src:o(5412).A+"",width:"1243",height:"521"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:'// Set gripper properties\nprivate void RunScript(\n\tdouble _Speed,\n\tdouble _Acceleration,\n\tdouble _Jerk,\n\tdouble _Amperage,\n\tref object Command_)\n{        \n    var manufacturer = Manufacturers.KUKA;\n    var commands = new List<Command>();\n\n    if(_Speed > 0)\n    commands.Add(\n        new Robots.Commands.Custom(\n            $"EGL_Set_Speed_{(int)_Speed}",\n            manufacturer,\n            $"EGL_SetSpeed({_Speed})", // KRL command\n            null));\n\n    if(_Acceleration > 0)\n    commands.Add(\n        new Robots.Commands.Custom(\n            $"EGL_Set_Acceleration_{(int)_Acceleration}",\n            manufacturer,\n            $"EGL_SetAcceleration({_Acceleration})", // KRL command\n            null));\n\n    if(_Jerk > 0)\n    commands.Add(\n        new Robots.Commands.Custom(\n            $"EGL_Set_Jerk_{(int)_Jerk}",\n            manufacturer,\n            $"EGL_SetJerk({_Jerk})", // KRL command\n            null));\n\n    if(_Amperage > 0)\n    commands.Add(\n        new Robots.Commands.Custom(\n            $"EGL_Set_Amperage_{(int)_Amperage}",\n            manufacturer,\n            $"EGL_SetAmperage({_Amperage})", // KRL command\n            null));\n\n    var cmdGroup = new Group(commands);\n    Command_ = cmdGroup;\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"egl-moveto",children:"EGL MoveTo:"}),"\n",(0,r.jsx)(n.p,{children:"Sets the desired position and movement command for the gripper."}),"\n",(0,r.jsxs)(n.p,{children:["This command must be supplied to each ",(0,r.jsx)(n.code,{children:"Robots.Target"})," where you intend the gripper to ",(0,r.jsx)(n.strong,{children:"open or close"}),"."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"egl_moveTo",src:o(2367).A+"",width:"1243",height:"449"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-cs",children:'// Move to position\nprivate void RunScript(double _Position, ref object Command_)\n{        \n    var manufacturer = Manufacturers.KUKA;\n\n    Command_ = new Robots.Commands.Custom(\n        $"EGL_MoveTo_{(int)_Position}",\n        manufacturer,\n        $"EGL_IS_OK = EGL_MoveTo({_Position})", // KRL command\n        null);;\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"result",children:"Result:"}),"\n",(0,r.jsxs)(n.p,{children:["In the left panel labeled '",(0,r.jsx)(n.strong,{children:"00.src"}),"', the commands provided by ",(0,r.jsx)(n.code,{children:"EGL_Init"})," and ",(0,r.jsx)(n.code,{children:"EGL_Set"})," are displayed. These commands are executed at the very beginning of the KRL program to initialize and prepare the gripper for use."]}),"\n",(0,r.jsxs)(n.p,{children:["In the right panel labeled '",(0,r.jsx)(n.strong,{children:"01.src"}),"', it is shown that after each ",(0,r.jsx)(n.code,{children:"PTP movement"}),", the gripper either fully opens or fully closes. By supplying values in the range of ",(0,r.jsx)(n.strong,{children:"0.0 to 85.0"}),", intermediate positions can be set, enabling the gripper to accommodate workpieces of varying sizes."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"EGL_IS_OK"})," stores a boolean value indicating whether any exceptions occurred during the gripper's movement."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"egl_program",src:o(6900).A+"",width:"2007",height:"792"})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},3437:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/EGL_Init-3ec173f7ec9da9922839eb229e8f8b0d.png"},2367:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/EGL_MoveTo-d35bda93fcf8026b16e9cc59d6841e5a.png"},6900:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/EGL_Programs-59835bbbaefd30db6fe5e6f2e424d1fe.png"},5412:(e,n,o)=>{o.d(n,{A:()=>t});const t=o.p+"assets/images/EGL_Settings-3d02e60a612cb12fa9bc4595bd00c5bc.png"},8453:(e,n,o)=>{o.d(n,{R:()=>i,x:()=>a});var t=o(6540);const r={},s=t.createContext(r);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);